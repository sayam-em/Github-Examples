name: "docker"

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  API_LOCATION: "api"
  APP_LOCATION: "/"
  OUTPUT_LOCATION: "build"

jobs:
  job1:
    runs-on: ubuntu-latest
    steps:
      - name: "Step 1"
        run: echo "World"

  job2:
    runs-on: ubuntu-latest
    steps:
      - name: "Step 2"
        run: echo "Hello"

  job3:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: "Checkout the repo"
        uses: actions/checkout@v4

      - name: "Login to the container registry"
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Build and push Docker image"
        id: build
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest
          labels: "some-label=some-value"

  job4:
    name: "Push Docker Image"
    runs-on: ubuntu-latest
    needs: job3
    steps:
      - name: "Checkout the repo"
        uses: actions/checkout@v4

      - name: "Login to Docker Hub"
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: "Extract meta data"
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: "Build and push Docker image"
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  job5:
    name: "Build and Push"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout the repo"
        uses: actions/checkout@v4
      - name: "login to github container registry"
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
      - name: setup docker buildx
        uses: docker/setup-buildx-action@v1
      - name: docker build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ghcr.io/${{github.actor}}/my-image:latest
      - name: verify
        run: docker pull ghcr.io/${{github.actor}}/my-image:latest

  job6:
    name: "Build and Release"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Build"
        run: echo "Add your build commands here" # Replace with your actual build commands

      - name: "Create Release"
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: "Upload Release Asset"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./path/to/your/asset # Replace with the actual path to your asset
          asset_name: your_asset_name # Replace with the actual name of your asset
          asset_content_type: application/octet-stream

  job7:
    name: Build and Deploy to DigitalOcean
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Login to github container registery
        uses: docker/login-action/@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: build and push to docker
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
      - name: deploy to digital ocean
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DIGITALOCEAN_HOST }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          key: ${{ secrets.DIGITALOCEAN_SSH_KEY }} 
          script: |
            docker pull ${{env.REGISTRY}}/${{env.IMAGE_NAME}}:${github.sha}

            docker stop app_container || true

            docker rm appp_container || true

            docker run -d --name app_container -p 80:80 ${{env.REGISTRY}}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  close_pull_request:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request
    steps:
    - name: No action required for DigitalOcean
      run: echo "No specific action required for closing pull requests with DigitalOcean deployment"





  job8:
      runs-on: ubuntu-latest
      container:
        image: node:16
      services:
        redis:
          image: redis
          ports:
            - 6379:6379
          credentials:
            username: ${{secrets.DOCKER_USERNAME}}
            password: ${{secrets.DOCKER_PASSWORD}}
        db:
          image: ghcr.io/octocat/testdb:latest
          credentials:
            username: ${{github.repository_owner}}
            password: ${{secrets.ghcr_password}}
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
  job9:
    runs-on: ubuntu-latest
    container:
      image: node:10.19-jessie
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: npm install
        run: npm ci
      - name: connected to postgres
        run: node.js client.js
        env:
          POSTGRES_HOST: postgres
          POSTGRES_PORT: 5432
  job10:
    name: learn-github-actions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
      
        with:
          node-version: "14"

      - run: npm install -g bats

      - run: bats -v


  job11:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: ['java', 'javascript', 'python']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: ${{ matrix.language }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  job12:
      runs-on: ubuntu-latest
      name: caching
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Set up Node.js
          uses: actions/setup-node@v4
          with:
            node-version: '14' 
            cache: 'npm'       

        - name: Initialize npm
          run: npm init -y     

        - name: Cache client.js
          id: cache
          uses: actions/cache@v4
          with:
            path: client.js 
            key: ${{ runner.os }}-client-js-${{ hashFiles('client.js') }}

        - name: Getting cache data
          if: steps.cache.outputs.cache-hit != 'true'
          run: |
            echo "Cache not found, running client.js..."
            node client.js
      

    

      

